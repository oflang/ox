# als=(1 2 3 4 5 6 7 8 9 100 101 102 103)

(a_ls Length) # 13, get length

(als = (als LeftShift 3)) # als=(101 102 103 1 2 3 4 5 6 7 8 9 100)
(als = (als RightShift 2)) # als=(103 1 2 3 4 5 6 7 8 9 100 101 102)
(als = (als Reverse)) # als=(102 101 100 9 8 7 6 5 4 3 2 1 103)

(als = (als Shuffle)) # als=(3 101 7 1 6 2 103 8 4 102 100 5 9))
(als = (als Sort)) # als=(1 2 3 4 5 6 7 8 9 100 101 102 103)
(als = (als SortBy `(9 10 11 12 0 1 2 3 3 4 5 6 7 8))) # als=(100 101 102 103 1 2 3 4 5 6 7 8 9)

((als @ (0 .. 4)) Project (als @ (4 .. 8))) # project a list to others ((100 1) (101 2) (102 3) (103 4))
((als @ (0 .. 4)) Project (als @ (4 .. 8)) (als @ (8 .. 12))) # ((100 1 5) (101 2 6) (102 3 7) (103 4 8))
(`(0 1) Distribute `(3 4 7)) # ((0 3) (0 4) (0 7) (1 3) (1 4) (1 7))

(`(121 34 56 33) WithKey) # ((0 121) (1 34) (2 56) (3 33))
(`(1 4 3 4 1 9 9 2) Unique) # (1 4 3 9 2)

(`((a b) (c (d) e) (f (g h))) Flatten 1) # (a b c (d) e f (g h))

(als Partition 4) # ((100 101 102 103) (1 2 3 4) (5 6 7 8))
(`(100 101 102 103 1 2 4) Partition 4 1) # (100 101 102 103) (101 102 103 1) (102 103 1 2) (103 1 2 4)

(`((11 12 13) (21 22 23) (31 32 33)) Partition `(2 2) 1) # ((((11 12) (21 22)) ((12 13) (22 23))) (((21 22) (31 32)) ((22 23) (32 33))))

(`((1 2) (3 4) (5 6)) Transpose) # ((1 2 5) (2 4 6))

(`(1 2 3 4 5) Riffle 0) # (1 0 2 0 3 0 4 0 5 0)
(`(1 2 3 4 5) Riffle 0 3) # (1 2 0 3 4 0 5)
(`(1 2 3 4 5) Riffle `(0 1)) # (1 0 2 1 3 0 4 1 5)

(`(0 0 1 0 2 1 5) Tally) # ((0 3) (1 2) (2 1) (5 1))

(0 NestList 4) # ((0) (0 0) (0 0 0) (0 0 0 0))
